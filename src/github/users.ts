/**
 * GitHub user-related functions.
 *
 * See CONTRIBUTING.md before contributing to this file.
 * @copyright 2021 SnapIT Solutions <https://snapit.solutions/>
 * @license GPL-3.0
 */
import got from 'got';
import { v4 as uuid } from 'uuid';
import { EXPIRE_STATE, GH, GH_API } from './constants.js';
import { TokenRes } from './types.js';
import { Request, State } from '../types.js';
import getConfig from '../config/index.js';
import { getLogger } from './index.js';

/**
 * Build the URL path by providing an endpoint.
 * @param {string} endpoint The endpoint starting with a slash.
 * @returns {string}
 * @example
 * const target = getUrl('/login');
 * // target: https://github.com/login
 */
function getUrl(endpoint: string): string {
  return GH + endpoint;
}

/**
 * This works like getUrl (see getUrl) except it returns the API
 * subdomain.
 * @param {string} endpoint The endpoint starting with a slash.
 * @returns {string}
 * @example
 * const target = getUrl('/user');
 * // target: https://api.github.com/user
 */
function getUrlApi(endpoint: string): string {
  return GH_API + endpoint;
}

/**
 * Get the access token for a user for the first time.
 * @param {string} code Provided by GitHub after they login.
 * @param {string} state Generated by us in the redirect endpoint.
 * @returns {Promise<string>} The token wrapped in a Promise. 
 */
async function login(code: string, state: string): Promise<string> {
  const { oauth } = await getConfig();
  const log = await getLogger('users-login');
  const target = getUrl('/login/oauth/access_token');

  try {
    const data = await got.post<TokenRes>(
      target,
      {
        headers: {
          'Content-Type': 'application/json',
        },
        responseType: 'json',
        resolveBodyOnly: true,
        searchParams: {
          code,
          state,
          client_secret: oauth.clientSecret,
          client_id: oauth.clientId,
        },
      },
    );

    return data.access_token;
  } catch (err) {
    log.error(`Failed to get token with ${code}\n`, err);
    throw err;
  }
}

/**
 * Get the user's token.
 * @param {Request} req
 * @param {string | undefined} code
 * @param {string | undefined} state
 * @throws {Error} If the user isn't logged in.
 * @returns {Promise<string>}
 * @example
 * // Get a token that hasn't been requested yet.
 * const token = await login(code, state);
 * // Get a token out of a request session data
 * const token = await login(req);
 */
export function getToken(
  req: Request,
  code?: string,
  state?: string,
): Promise<string> {
  return new Promise((res, rej) => {
    if (code !== undefined) {
      if (state === undefined) {
        throw new Error("A state code wasn't provided.");
      }

      login(code, state)
        .then((token) => {
          req.session.token = token;
          req.session.save((err) => {
            if (err !== undefined) {
              rej(err);
            } else {
              res(token);
            }
          });
        })
        .catch(rej);
      return;
    }

    if (req.session.token === undefined) {
      throw new Error("User isn't logged in.");
    }

    res(req.session.token);
  });
}

/**
 * @param {Request} req
 * @param {string | undefined} optToken Optional token
 * @throws {Error} if the user isn't logged in.
 * @returns {Promise<UserData>}
 */
export async function getUserData(
  req: Request,
  optToken?: string,
): Promise<any> {
  // We will store their data in their session to prevent reaching
  // out to GitHub's API.
  if (req.session.user !== undefined) {
    return req.session.user;
  }

  const target = getUrlApi('/user');
  const token = optToken || await getToken(req);
  if (token === null) {
    throw new Error("User isn't logged in.");
  }

  const resp = await got.get<any>(
    target,
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    },
  );

  return resp.body;
}

/**
 * "State" is utilized when communicating with GitHub's Auth-flow
 * it help prevents MiTM attacks.
 * @param {Request}
 * @returns {State}
 */
export function getState(req: Request): Promise<State> {
  return new Promise((res, rej) => {
    // Check if the user already has a state code generated.
    if (req.session.state !== undefined) {
      const now = new Date();
      // Make sure the state isn't expired.
      if (req.session.state.expires <= now) {
        res(req.session.state);
      }
    }

    const expiresEpoch = Date.now() + EXPIRE_STATE;
    const code = uuid();
    const state = {
      key: code,
      expires: new Date(expiresEpoch),
    };
    req.session.state = state;
    req.session.save(rej);

    res(state);
  });
}
